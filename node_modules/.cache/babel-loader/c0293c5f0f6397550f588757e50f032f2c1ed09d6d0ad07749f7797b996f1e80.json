{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport data from '../../data.json';\nconst ratingSlice = createSlice({\n  name: 'rating',\n  initialState: {\n    singers: data.body // Set the initial state with the singers data\n    // randomRatingIntervalId: null,\n  },\n\n  reducers: {\n    setRating(state, action) {\n      // const { singerName, rating } = action.payload;\n      // const singerIndex = state.singers.findIndex((singer) => singer.name === singerName);\n      // if (singerIndex !== -1) {\n      //   state.singers[singerIndex].rating = rating;\n      // }\n      console.log('action', action);\n      // const { singerName, rating } = action.payload;\n      // console.log(Array.isArray(state.items))\n      // const singer = state.singers.find((singer) => singer.name === singerName);\n      // if (singer) {\n      //   singer.rating = rating;\n      // }\n      const {\n        singerName,\n        rating\n      } = action.payload;\n      console.log(Array.isArray(state.items));\n      const singer = state.singers.find(singer => singer.name === singerName);\n      if (singer) {\n        singer.rating = rating;\n      }\n    },\n    sortSingersByRating(state) {\n      state.singers.sort((a, b) => b.rating - a.rating);\n    }\n    // toggleRandomRating(state) {\n    //   if (state.randomRatingIntervalId) {\n    //     clearInterval(state.randomRatingIntervalId);\n    //     state.randomRatingIntervalId = null;\n    //   } else {\n    //     state.randomRatingIntervalId = setInterval(() => {\n    //       const randomSinger = state.singers[Math.floor(Math.random() * state.singers.length)];\n    //       const randomRating = Math.floor(Math.random() * 11); // Random rating from 0 to 10\n    //       state.singers.forEach((singer) => {\n    //         if (singer.name === randomSinger.name) {\n    //           singer.rating = randomRating;\n    //         }\n    //       });\n    //     }, 2000); // Change rating every 2 seconds (adjust this value as needed)\n\n    //   }\n    // },\n  }\n});\n\nexport const {\n  setRating,\n  sortSingersByRating\n} = ratingSlice.actions;\nexport default ratingSlice.reducer;\n\n//   setSort(state, action) {\n//     console.log('action', action);\n//     state.sort = action.payload;\n//     if (state.sort === 'By rating') {\n//       state.items.sort((a, b) => b.rating - a.rating);\n//     }\n//   },","map":{"version":3,"names":["createSlice","data","ratingSlice","name","initialState","singers","body","reducers","setRating","state","action","console","log","singerName","rating","payload","Array","isArray","items","singer","find","sortSingersByRating","sort","a","b","actions","reducer"],"sources":["C:/Java45/SingersRate/src/redux/slices/ratingSlice.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\nimport data from '../../data.json';\r\n\r\nconst ratingSlice = createSlice({\r\n  name: 'rating',\r\n  initialState: {\r\n    singers: data.body, // Set the initial state with the singers data\r\n    // randomRatingIntervalId: null,\r\n  },\r\n  reducers: {\r\n    setRating(state, action) {\r\n      // const { singerName, rating } = action.payload;\r\n      // const singerIndex = state.singers.findIndex((singer) => singer.name === singerName);\r\n      // if (singerIndex !== -1) {\r\n      //   state.singers[singerIndex].rating = rating;\r\n      // }\r\n      console.log('action', action);\r\n        // const { singerName, rating } = action.payload;\r\n        // console.log(Array.isArray(state.items))\r\n        // const singer = state.singers.find((singer) => singer.name === singerName);\r\n        // if (singer) {\r\n        //   singer.rating = rating;\r\n        // }\r\n        const { singerName, rating } = action.payload;\r\n        console.log(Array.isArray(state.items))\r\n        const singer = state.singers.find((singer) => singer.name === singerName);\r\n        if (singer) {\r\n          singer.rating = rating;\r\n        }\r\n    },\r\n    sortSingersByRating(state) {\r\n      state.singers.sort((a, b) => b.rating - a.rating);\r\n    },\r\n    // toggleRandomRating(state) {\r\n    //   if (state.randomRatingIntervalId) {\r\n    //     clearInterval(state.randomRatingIntervalId);\r\n    //     state.randomRatingIntervalId = null;\r\n    //   } else {\r\n    //     state.randomRatingIntervalId = setInterval(() => {\r\n    //       const randomSinger = state.singers[Math.floor(Math.random() * state.singers.length)];\r\n    //       const randomRating = Math.floor(Math.random() * 11); // Random rating from 0 to 10\r\n    //       state.singers.forEach((singer) => {\r\n    //         if (singer.name === randomSinger.name) {\r\n    //           singer.rating = randomRating;\r\n    //         }\r\n    //       });\r\n    //     }, 2000); // Change rating every 2 seconds (adjust this value as needed)\r\n        \r\n    //   }\r\n    // },\r\n  },\r\n});\r\n\r\nexport const { setRating, sortSingersByRating } = ratingSlice.actions;\r\n\r\nexport default ratingSlice.reducer;\r\n\r\n//   setSort(state, action) {\r\n//     console.log('action', action);\r\n//     state.sort = action.payload;\r\n//     if (state.sort === 'By rating') {\r\n//       state.items.sort((a, b) => b.rating - a.rating);\r\n//     }\r\n//   },\r\n\r\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAC9C,OAAOC,IAAI,MAAM,iBAAiB;AAElC,MAAMC,WAAW,GAAGF,WAAW,CAAC;EAC9BG,IAAI,EAAE,QAAQ;EACdC,YAAY,EAAE;IACZC,OAAO,EAAEJ,IAAI,CAACK,IAAI,CAAE;IACpB;EACF,CAAC;;EACDC,QAAQ,EAAE;IACRC,SAASA,CAACC,KAAK,EAAEC,MAAM,EAAE;MACvB;MACA;MACA;MACA;MACA;MACAC,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEF,MAAM,CAAC;MAC3B;MACA;MACA;MACA;MACA;MACA;MACA,MAAM;QAAEG,UAAU;QAAEC;MAAO,CAAC,GAAGJ,MAAM,CAACK,OAAO;MAC7CJ,OAAO,CAACC,GAAG,CAACI,KAAK,CAACC,OAAO,CAACR,KAAK,CAACS,KAAK,CAAC,CAAC;MACvC,MAAMC,MAAM,GAAGV,KAAK,CAACJ,OAAO,CAACe,IAAI,CAAED,MAAM,IAAKA,MAAM,CAAChB,IAAI,KAAKU,UAAU,CAAC;MACzE,IAAIM,MAAM,EAAE;QACVA,MAAM,CAACL,MAAM,GAAGA,MAAM;MACxB;IACJ,CAAC;IACDO,mBAAmBA,CAACZ,KAAK,EAAE;MACzBA,KAAK,CAACJ,OAAO,CAACiB,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAACV,MAAM,GAAGS,CAAC,CAACT,MAAM,CAAC;IACnD;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;EACF;AACF,CAAC,CAAC;;AAEF,OAAO,MAAM;EAAEN,SAAS;EAAEa;AAAoB,CAAC,GAAGnB,WAAW,CAACuB,OAAO;AAErE,eAAevB,WAAW,CAACwB,OAAO;;AAElC;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}