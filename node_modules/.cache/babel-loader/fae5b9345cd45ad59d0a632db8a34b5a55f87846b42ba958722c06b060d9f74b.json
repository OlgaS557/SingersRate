{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport data from '../../data.json';\nconst ratingSlice = createSlice({\n  name: 'rating',\n  initialState: {\n    singers: data.body,\n    // Set the initial state with the singers data\n    randomRatingIntervalId: null\n  },\n  reducers: {\n    setRating(state, action) {\n      const {\n        singerName,\n        rating\n      } = action.payload;\n      const singerIndex = state.singers.findIndex(singer => singer.name === singerName);\n      if (singerIndex !== -1) {\n        state.singers[singerIndex].rating = rating;\n      }\n    },\n    sortSingersByRating(state) {\n      state.singers.sort((a, b) => b.rating - a.rating);\n    },\n    toggleRandomRating(state) {\n      if (state.randomRatingIntervalId) {\n        clearInterval(state.randomRatingIntervalId);\n        state.randomRatingIntervalId = null;\n      } else {\n        state.randomRatingIntervalId = setInterval(() => {\n          const randomSinger = state.singers[Math.floor(Math.random() * state.singers.length)];\n          const randomRating = Math.floor(Math.random() * 11); // Random rating from 0 to 10\n          state.singers.forEach(singer => {\n            if (singer.name === randomSinger.name) {\n              singer.rating = randomRating;\n            }\n          });\n        }, 2000); // Change rating every 2 seconds (adjust this value as needed)\n        const handleRandomRating = () => {\n          if (randomRatingIntervalId) {\n            clearInterval(randomRatingIntervalId);\n            setRandomRatingIntervalId(null);\n            setRandomRating(null);\n          } else {\n            const intervalId = setInterval(() => {\n              const randomRating = Math.floor(Math.random() * 5) + 1;\n              dispatch(setRating({\n                id: book.id,\n                rating: randomRating\n              }));\n              setRandomRating(randomRating);\n            }, 1000);\n            setRandomRatingIntervalId(intervalId);\n          }\n        };\n      }\n    }\n  }\n});\nexport const {\n  setRating,\n  sortSingersByRating,\n  toggleRandomRating\n} = ratingSlice.actions;\nexport default ratingSlice.reducer;\n\n//   setSort(state, action) {\n//     console.log('action', action);\n//     state.sort = action.payload;\n//     if (state.sort === 'By rating') {\n//       state.items.sort((a, b) => b.rating - a.rating);\n//     }\n//   },","map":{"version":3,"names":["createSlice","data","ratingSlice","name","initialState","singers","body","randomRatingIntervalId","reducers","setRating","state","action","singerName","rating","payload","singerIndex","findIndex","singer","sortSingersByRating","sort","a","b","toggleRandomRating","clearInterval","setInterval","randomSinger","Math","floor","random","length","randomRating","forEach","handleRandomRating","setRandomRatingIntervalId","setRandomRating","intervalId","dispatch","id","book","actions","reducer"],"sources":["C:/Java45/SingersRate/src/redux/slices/ratingSlice.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\nimport data from '../../data.json';\r\n\r\nconst ratingSlice = createSlice({\r\n  name: 'rating',\r\n  initialState: {\r\n    singers: data.body, // Set the initial state with the singers data\r\n    randomRatingIntervalId: null,\r\n  },\r\n  reducers: {\r\n    setRating(state, action) {\r\n      const { singerName, rating } = action.payload;\r\n      const singerIndex = state.singers.findIndex((singer) => singer.name === singerName);\r\n      if (singerIndex !== -1) {\r\n        state.singers[singerIndex].rating = rating;\r\n      }\r\n    },\r\n    sortSingersByRating(state) {\r\n      state.singers.sort((a, b) => b.rating - a.rating);\r\n    },\r\n    toggleRandomRating(state) {\r\n      if (state.randomRatingIntervalId) {\r\n        clearInterval(state.randomRatingIntervalId);\r\n        state.randomRatingIntervalId = null;\r\n      } else {\r\n        state.randomRatingIntervalId = setInterval(() => {\r\n          const randomSinger = state.singers[Math.floor(Math.random() * state.singers.length)];\r\n          const randomRating = Math.floor(Math.random() * 11); // Random rating from 0 to 10\r\n          state.singers.forEach((singer) => {\r\n            if (singer.name === randomSinger.name) {\r\n              singer.rating = randomRating;\r\n            }\r\n          });\r\n        }, 2000); // Change rating every 2 seconds (adjust this value as needed)\r\n        const handleRandomRating = () => {\r\n          if (randomRatingIntervalId) {\r\n            clearInterval(randomRatingIntervalId);\r\n            setRandomRatingIntervalId(null);\r\n            setRandomRating(null);\r\n          } else {\r\n            const intervalId = setInterval(() => {\r\n              const randomRating = Math.floor(Math.random() * 5) + 1;\r\n              dispatch(setRating({ id: book.id, rating: randomRating }));\r\n              setRandomRating(randomRating);\r\n            }, 1000);\r\n            setRandomRatingIntervalId(intervalId);\r\n          }\r\n        };\r\n      }\r\n    },\r\n  },\r\n});\r\n\r\nexport const { setRating, sortSingersByRating, toggleRandomRating } = ratingSlice.actions;\r\n\r\nexport default ratingSlice.reducer;\r\n\r\n//   setSort(state, action) {\r\n//     console.log('action', action);\r\n//     state.sort = action.payload;\r\n//     if (state.sort === 'By rating') {\r\n//       state.items.sort((a, b) => b.rating - a.rating);\r\n//     }\r\n//   },\r\n\r\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAC9C,OAAOC,IAAI,MAAM,iBAAiB;AAElC,MAAMC,WAAW,GAAGF,WAAW,CAAC;EAC9BG,IAAI,EAAE,QAAQ;EACdC,YAAY,EAAE;IACZC,OAAO,EAAEJ,IAAI,CAACK,IAAI;IAAE;IACpBC,sBAAsB,EAAE;EAC1B,CAAC;EACDC,QAAQ,EAAE;IACRC,SAASA,CAACC,KAAK,EAAEC,MAAM,EAAE;MACvB,MAAM;QAAEC,UAAU;QAAEC;MAAO,CAAC,GAAGF,MAAM,CAACG,OAAO;MAC7C,MAAMC,WAAW,GAAGL,KAAK,CAACL,OAAO,CAACW,SAAS,CAAEC,MAAM,IAAKA,MAAM,CAACd,IAAI,KAAKS,UAAU,CAAC;MACnF,IAAIG,WAAW,KAAK,CAAC,CAAC,EAAE;QACtBL,KAAK,CAACL,OAAO,CAACU,WAAW,CAAC,CAACF,MAAM,GAAGA,MAAM;MAC5C;IACF,CAAC;IACDK,mBAAmBA,CAACR,KAAK,EAAE;MACzBA,KAAK,CAACL,OAAO,CAACc,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAACR,MAAM,GAAGO,CAAC,CAACP,MAAM,CAAC;IACnD,CAAC;IACDS,kBAAkBA,CAACZ,KAAK,EAAE;MACxB,IAAIA,KAAK,CAACH,sBAAsB,EAAE;QAChCgB,aAAa,CAACb,KAAK,CAACH,sBAAsB,CAAC;QAC3CG,KAAK,CAACH,sBAAsB,GAAG,IAAI;MACrC,CAAC,MAAM;QACLG,KAAK,CAACH,sBAAsB,GAAGiB,WAAW,CAAC,MAAM;UAC/C,MAAMC,YAAY,GAAGf,KAAK,CAACL,OAAO,CAACqB,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGlB,KAAK,CAACL,OAAO,CAACwB,MAAM,CAAC,CAAC;UACpF,MAAMC,YAAY,GAAGJ,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;UACrDlB,KAAK,CAACL,OAAO,CAAC0B,OAAO,CAAEd,MAAM,IAAK;YAChC,IAAIA,MAAM,CAACd,IAAI,KAAKsB,YAAY,CAACtB,IAAI,EAAE;cACrCc,MAAM,CAACJ,MAAM,GAAGiB,YAAY;YAC9B;UACF,CAAC,CAAC;QACJ,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;QACV,MAAME,kBAAkB,GAAGA,CAAA,KAAM;UAC/B,IAAIzB,sBAAsB,EAAE;YAC1BgB,aAAa,CAAChB,sBAAsB,CAAC;YACrC0B,yBAAyB,CAAC,IAAI,CAAC;YAC/BC,eAAe,CAAC,IAAI,CAAC;UACvB,CAAC,MAAM;YACL,MAAMC,UAAU,GAAGX,WAAW,CAAC,MAAM;cACnC,MAAMM,YAAY,GAAGJ,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC;cACtDQ,QAAQ,CAAC3B,SAAS,CAAC;gBAAE4B,EAAE,EAAEC,IAAI,CAACD,EAAE;gBAAExB,MAAM,EAAEiB;cAAa,CAAC,CAAC,CAAC;cAC1DI,eAAe,CAACJ,YAAY,CAAC;YAC/B,CAAC,EAAE,IAAI,CAAC;YACRG,yBAAyB,CAACE,UAAU,CAAC;UACvC;QACF,CAAC;MACH;IACF;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAE1B,SAAS;EAAES,mBAAmB;EAAEI;AAAmB,CAAC,GAAGpB,WAAW,CAACqC,OAAO;AAEzF,eAAerC,WAAW,CAACsC,OAAO;;AAElC;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}